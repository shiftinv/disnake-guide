"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[726],{5318:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return p}});var a=t(7378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(t),p=r,f=u["".concat(l,".").concat(p)]||u[p]||m[p]||o;return t?a.createElement(f,i(i({ref:n},d),{},{components:t})):a.createElement(f,i({ref:n},d))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},517:function(e,n,t){var a=t(7378);n.Z=function(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},2120:function(e,n,t){t.d(n,{Z:function(){return u}});var a=t(5773),r=t(7378),o=t(6457),i=t(4956);var s=function(){var e=(0,r.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=t(6429),c=t(8944),d="tabItem_a7dU";function m(e){var n,t,o,i=e.lazy,m=e.block,u=e.defaultValue,p=e.values,f=e.groupId,h=e.className,g=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=p?p:g.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),y=(0,l.lx)(v,(function(e,n){return e.value===n.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===u?u:null!=(n=null!=u?u:null==(t=g.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(o=g[0])?void 0:o.props.value;if(null!==b&&!v.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=s(),w=k.tabGroupChoices,N=k.setTabGroupChoices,C=(0,r.useState)(b),T=C[0],x=C[1],_=[],I=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var O=w[f];null!=O&&O!==T&&v.some((function(e){return e.value===O}))&&x(O)}var E=function(e){var n=e.currentTarget,t=_.indexOf(n),a=v[t].value;a!==T&&(I(n),x(a),null!=f&&N(f,a))},D=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=_.indexOf(e.currentTarget)+1;t=_[a]||_[0];break;case"ArrowLeft":var r=_.indexOf(e.currentTarget)-1;t=_[r]||_[_.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":m},h)},v.map((function(e){var n=e.value,t=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:function(e){return _.push(e)},onKeyDown:D,onFocus:E,onClick:E},o,{className:(0,c.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),i?(0,r.cloneElement)(g.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},g.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==T})}))))}function u(e){var n=(0,o.Z)();return r.createElement(m,(0,a.Z)({key:String(n)},e))}},3426:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return d},metadata:function(){return m},toc:function(){return u},default:function(){return f}});var a=t(5773),r=t(808),o=(t(7378),t(5318)),i=t(2120),s=t(517),l=["components"],c={description:"A section that lists practices you should follow while making your Discord bot.",keywords:["disnake","bot","guide","tutorial","good practices","python"]},d="Good practices",m={unversionedId:"faq/good-practices",id:"faq/good-practices",title:"Good practices",description:"A section that lists practices you should follow while making your Discord bot.",source:"@site/docs/faq/good-practices.mdx",sourceDirName:"faq",slug:"/faq/good-practices",permalink:"/faq/good-practices",editUrl:"https://github.com/DisnakeDev/guide/edit/main/guide/docs/faq/good-practices.mdx",tags:[],version:"current",lastUpdatedBy:"shiftinv",lastUpdatedAt:1641924670,formattedLastUpdatedAt:"1/11/2022",frontMatter:{description:"A section that lists practices you should follow while making your Discord bot.",keywords:["disnake","bot","guide","tutorial","good practices","python"]},sidebar:"guideSidebar",previous:{title:"Gateway Intents",permalink:"/popular-topics/intents"}},u=[{value:"Running code when a cog is loaded",id:"running-code-when-a-cog-is-loaded",children:[],level:2},{value:"Reloading your bot",id:"reloading-your-bot",children:[],level:2},{value:"Converting arguments in commands",id:"converting-arguments-in-commands",children:[],level:2},{value:"Context command targets",id:"context-command-targets",children:[],level:2},{value:"Slash command descriptions",id:"slash-command-descriptions",children:[],level:2},{value:"Guild-only commands",id:"guild-only-commands",children:[],level:2}],p={toc:u};function f(e){var n=e.components,t=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"good-practices"},"Good practices"),(0,o.kt)("h2",{id:"running-code-when-a-cog-is-loaded"},"Running code when a cog is loaded"),(0,o.kt)("p",null,"Most people are used to running everything in ",(0,o.kt)("inlineCode",{parentName:"p"},"__init__")," but that doesn't allow running async code. In this case you can\noverwrite the special ",(0,o.kt)("inlineCode",{parentName:"p"},"cog_load")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"{5,6}","{5,6}":!0},"class MyCog(commands.Cog):\n    def __init__(self, bot: commands.Bot):\n        self.bot = bot\n\n    async def cog_load(self):\n        self.data = await bot.fetch_database_data()\n\n    @commands.slash_command()\n    async def command(self, interaction: disnake.ApplicationCommandInteraction, user: disnake.User):\n        await interaction.response.send_message(self.data[user.id])\n")),(0,o.kt)("h2",{id:"reloading-your-bot"},"Reloading your bot"),(0,o.kt)("p",null,"A one of the lesser known disnake features is the ",(0,o.kt)("inlineCode",{parentName:"p"},"reload")," kwarg for your bot. It reloads extensions every time they are\nedited; allowing you to test your code in real-time. This is especially useful if startup times for your bot are very\nslow, since only one extension will be reloaded at a time."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"{3}","{3}":!0},"from disnake.ext import commands\n\nbot = commands.Bot(..., reload=True)\n")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This should be used purely for debugging. Please do not use this in production."))),(0,o.kt)("h2",{id:"converting-arguments-in-commands"},"Converting arguments in commands"),(0,o.kt)("p",null,"discord.py used to have ",(0,o.kt)("inlineCode",{parentName:"p"},"Converter")," classes to convert arguments if they are provided. These were however very hard to\nuse with type-checkers because the type of the parameter is never actually the converter itself."),(0,o.kt)("p",null,"Disnake aims to eliminate this issue by only allowing conversion of builtin types like ",(0,o.kt)("inlineCode",{parentName:"p"},"disnake.Member"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"disnake.Emoji"),", etc. If you ever want to have your own converter you have to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"converter")," argument in ",(0,o.kt)("inlineCode",{parentName:"p"},"Param"),"."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"disnake",label:"disnake",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"{10}","{10}":!0},'async def convert_data(inter: disnake.ApplicationCommandInteraction, arg: str):\n    parts = arg.split(",")\n    return {"a": parts[0], "b": int(parts[1]), "c": parts[2].lower()}\n\n\n@commands.slash_command()\nasync def command(\n    self,\n    inter: disnake.ApplicationCommandInteraction,\n    data: Dict[str, Any] = commands.Param(converter=convert_data),\n):\n    ...\n'))),(0,o.kt)(s.Z,{value:"discord.py",label:"discord.py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'linenums="1"',linenums:'"1"'},'class DataConverter(commands.Converter):\n    async def convert(self, ctx: commands.Context, arg: str):\n        parts = arg.split(",")\n        return {"a": parts[0], "b": int(parts[1]), "c": parts[2].lower()}\n\n\n@commands.command()\nasync def command(self, ctx: commands.Context, data: DataConverter):\n    ...\n')))),(0,o.kt)("p",null,"If you absolutely want to be able to use classes you may pass in a class method. Alternatively, set a method of the\nclass to be the converter using ",(0,o.kt)("inlineCode",{parentName:"p"},"converter_method"),"."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"classmethod",label:"classmethod converter",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"{9-12,19}","{9-12,19}":!0},'from dataclasses import dataclass\n\n\n@dataclass\nclass Data:\n    a: str\n    b: int\n\n    @classmethod\n    async def from_option(cls, inter: disnake.CommandInteraction, arg: str):\n        a, b = arg.split(",")\n        return cls(a, int(b))\n\n\n@commands.slash_command()\nasync def command(\n    self,\n    inter: disnake.CommandInteraction,\n    data: Data = commands.Param(converter=Data.from_option),\n):\n    ...\n'))),(0,o.kt)(s.Z,{value:"converter",label:"converter method",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"{9-12,19}","{9-12,19}":!0},'from dataclasses import dataclass\n\n\n@dataclass\nclass Data:\n    a: str\n    b: int\n\n    @commands.converter_method\n    async def from_option(cls, inter: disnake.CommandInteraction, arg: str):\n        a, b = arg.split(",")\n        return cls(a, int(b))\n\n\n@commands.slash_command()\nasync def command(\n    self,\n    inter: disnake.CommandInteraction,\n    data: Data,\n):\n    ...\n')))),(0,o.kt)("h2",{id:"context-command-targets"},"Context command targets"),(0,o.kt)("p",null,"Instead of using ",(0,o.kt)("inlineCode",{parentName:"p"},"inter.target")," you should be using a parameter of your command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'linenums="1"',linenums:'"1"'},'@commands.user_command()\nasync def command(self, inter: disnake.ApplicationCommandInteraction, user: disnake.User):\n    await inter.response.send_message(f"Used on {user.mention}")\n')),(0,o.kt)("h2",{id:"slash-command-descriptions"},"Slash command descriptions"),(0,o.kt)("p",null,"You may use docstrings for command and option descriptions. Everything before ",(0,o.kt)("inlineCode",{parentName:"p"},"Parameters")," is the command description.\nEverything after ",(0,o.kt)("inlineCode",{parentName:"p"},"Parameters")," are the option descriptions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'linenums="1"',linenums:'"1"'},'@commands.slash_command()\nasync def command(\n    self,\n    inter: disnake.ApplicationCommandInteraction,\n    category: str,\n    item: str,\n    details: bool,\n):\n    """Show item info\n\n    Parameters\n    ----------\n    category: The category to search\n    item: The item to display\n    details: Whether to get the details of this time\n    """\n')),(0,o.kt)("h2",{id:"guild-only-commands"},"Guild-only commands"),(0,o.kt)("p",null,"While disnake does provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"@commands.guild_only()")," decorator, it still makes you handle ",(0,o.kt)("inlineCode",{parentName:"p"},"guild")," being optional in\ncase you're using linters. To solve this you should be using ",(0,o.kt)("inlineCode",{parentName:"p"},"GuildCommandInteraction"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'linenums="1"',linenums:'"1"'},"# before\n@commands.slash_command()\n@commands.guild_only()\nasync def command(inter: disnake.ApplicationCommandInteraction):\n    assert inter.guild is not None\n    await inter.send(inter.guild.name)\n\n\n# after\n@commands.slash_command()\nasync def command(inter: disnake.GuildCommandInteraction):\n    await inter.send(inter.guild.name)\n")))}f.isMDXComponent=!0}}]);